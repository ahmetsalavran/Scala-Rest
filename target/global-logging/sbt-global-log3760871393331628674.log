[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@5c8e7687, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/Asus/Desktop/scalas/deneme/deneme/app/repositories/MessagesRepository.scala","languageId":"scala","version":1,"text":"package repositories\r\n\r\nimport models.Todb\r\nimport javax.inject._\r\nimport reactivemongo.api.bson.collection.BSONCollection\r\nimport play.modules.reactivemongo.ReactiveMongoApi\r\nimport scala.concurrent.{ExecutionContext, Future}\r\nimport reactivemongo.api.{Cursor, ReadPreference}\r\nimport reactivemongo.bson.{BSONDocument, BSONObjectID}\r\nimport org.joda.time.DateTime\r\nimport reactivemongo.api.commands.WriteResult\r\n\r\n\r\n@Singleton\r\nclass MessagesRepository @Inject()(\r\n                                 implicit executionContext: ExecutionContext,\r\n                                 reactiveMongoApi: ReactiveMongoApi\r\n                               ) {\r\n  def collection: Future[BSONCollection] = reactiveMongoApi.database.map(db => db.collection(\"deneme\"))\r\n\r\n def findAll(tag:Option[String],count:String): Future[Seq[Todb]] = {\r\n    collection.flatMap(\r\n      _.find(BSONDocument(\"tags\" -> tag), Option.empty[Todb])\r\n        .cursor[Todb](ReadPreference.Primary)\r\n        .collect[Seq](count.toInt, Cursor.FailOnError[Seq[Todb]]())\r\n    )\r\n  }\r\n\r\n  def create(todb: Todb): Future[WriteResult] = {\r\n\r\n    collection.flatMap(_.insert(ordered = false)\r\n      .one(todb.copy()))\r\n  }\r\n\r\n    def findOne(id: BSONObjectID): Future[Option[Todb]] = {\r\n    collection.flatMap(_.find(BSONDocument(\"_id\" -> id), Option.empty[Todb]).one[Todb])\r\n  }\r\n\r\n    def delete(id: BSONObjectID):Future[WriteResult] = {\r\n    collection.flatMap(\r\n      _.delete().one(BSONDocument(\"_id\" -> id), Some(1))\r\n    )\r\n  }\r\n}\r\n\r\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/Asus/Desktop/scalas/deneme/deneme/app/controllers/MessagesController.scala","languageId":"scala","version":1,"text":"package controllers\r\n\r\nimport javax.inject._\r\nimport play.api.mvc._\r\nimport repositories.MessagesRepository\r\nimport reactivemongo.bson.BSONObjectID\r\nimport play.api.libs.json.{Json, __}\r\nimport scala.util.{Failure, Success}\r\nimport scala.concurrent.{ExecutionContext, Future}\r\nimport scala.collection.mutable.ListBuffer\r\n\r\n\r\nimport models.Todb\r\n\r\nimport play.api.libs.json._\r\n\r\n\r\n@Singleton\r\nclass MessagesController @Inject()(\r\n                                 implicit executionContext: ExecutionContext,\r\n                                 val messagesRepository: MessagesRepository,\r\n                                 val controllerComponents: ControllerComponents)\r\n  extends BaseController {\r\n\r\n  def check = Action { request =>\r\n         Ok(Json.toJson(Seq(\r\n        \"status\"     -> JsString(\"ok\"))))}\r\n\r\n  def create():Action[JsValue] = Action.async(controllerComponents.parsers.json) { \r\n\r\n    implicit request => {\r\n    val uuid:String = java.util.UUID.randomUUID.toString\r\n    val user_agent:String = request.headers.get(\"User-Agent\").get\r\n    val req:String = s\"${request.body}\"\r\n    val message:String = req.substring(12, req.length-2)\r\n    var tags = new ListBuffer[String]()\r\n    val words = message.split(\" \").toList\r\n\r\n    for (word <- words){\r\n     if ( word contains \"#\"){tags+=word.substring(1)}}\r\n    tags.toList\r\n\r\n    val json: JsValue = JsObject(\r\n      Seq(\r\n        \"id\"     -> JsString(uuid),\r\n        \"user_agent\" ->JsString(user_agent),\r\n        \"message\" -> JsString(message),\r\n        \"tags\" -> JsString(tags.mkString(\",\")),\r\n        \"slugs\" -> JsString(tags.mkString(\",\").toLowerCase())\r\n            ))\r\n\r\n    json.validate[Todb].fold(\r\n          _ => Future.successful(BadRequest(\"Cannot create a message\")),\r\n          todb => messagesRepository.create(todb).map { _ => Created(Json.toJson(todb))})            \r\n    }}\r\n\r\n  def findOne(id:String):Action[AnyContent] = Action.async { implicit request: Request[AnyContent] =>\r\n  { val objectIdTryResult = BSONObjectID.parse(id)\r\n      objectIdTryResult match {\r\n        case Success(objectId) => messagesRepository.findOne(objectId).map {\r\n           messages => Ok(Json.toJson(messages))\r\n        }\r\n        case Failure(_) => Future.successful(BadRequest(\"There is no message in that id\"))\r\n      }}}\r\n  \r\n  def delete(id: String):Action[AnyContent]  = Action.async { implicit request => \r\n    { val objectIdTryResult = BSONObjectID.parse(id)\r\n      objectIdTryResult match {\r\n        case Success(objectId) => messagesRepository.delete(objectId).map {\r\n          _ => Ok(Json.toJson(\"delete has been succesfull\"))\r\n        }\r\n        case Failure(_) => Future.successful(BadRequest(\"Cannot delete the message\"))\r\n      }\r\n  }\r\n}\r\n\r\n    def findAll(tag:Option[String],page:String,count:String):Action[AnyContent] = Action.async { implicit request: Request[AnyContent] =>\r\n    messagesRepository.findAll(tag,count).map {\r\n      messages => Ok(Json.toJson(messages))\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/* \r\nfetch(tag:String,page:Int)\r\n\r\nOk(Json.toJson(Seq(\r\n        \"status\"     -> JsString(s\"tag: $tag\"))))\r\n\r\n\r\n BUNUN Ä°Ã‡Ä°N MODEL FALANDA AYARLANMALI\r\n    val json: JsValue = JsObject(\r\n      Seq(\r\n        \"id\"     -> JsString(uuid),\r\n        \"user_agent\" ->JsString(user_agent),\r\n        \"message\" -> JsString(message),\r\n            \"tags\" -> JsArray(\r\n      IndexedSeq(\r\n        JsObject(\r\n          Seq(\r\n            \"tug\" -> JsString(tags(0)),\r\n            \"slug\"  -> JsString(tags(0).toLowerCase())\r\n          )\r\n        ),\r\n        JsObject(\r\n          Seq(\r\n            \"tug\" -> JsString(tags(1)),\r\n            \"slug\"  -> JsString(tags(1).toLowerCase())\r\n          ))))))\r\n\r\n        println(json)\r\n    json.validate[Todb].fold(\r\n          _ => Future.successful(BadRequest(\"Cannot create a message\")),\r\n          todb => messagesRepository.create(todb).map { _ => Created(Json.toJson(todb))})\r\n*/"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\Asus\Desktop\scalas\deneme\deneme\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed 18.Eki.2021 18:09:08[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
